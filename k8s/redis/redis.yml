apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: redis
  labels:
    app: redis
spec:
  clusterIP: None
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
  - name: sentinel
    port: 26379
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis
spec:
  serviceName: redis
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: redis
        image: redis:3.2-alpine
        imagePullPolicy: Always
        command: [
          redis-server,
          --appendonly, "yes",
          --save, "60", "1000",
        ]
        ports:
        - name: redis
          containerPort: 6379
        volumeMounts:
        - name: data
          mountPath: /data
        livenessProbe:
          exec:
            command: [ redis-cli, ping ]
        readinessProbe:
          exec:
            command: [ redis-cli, ping ]
        resources:
          requests:
            cpu: 100m
            memory: 500Mi
      - name: sentinel
        image: redis:3.2-alpine
        imagePullPolicy: Always
        command: [sh, -c, "touch sentinel.conf && exec redis-sentinel sentinel.conf"]
        ports:
        - name: sentinel
          containerPort: 26379
        livenessProbe:
          exec:
            command: [ redis-cli, -p, "26379", ping ]
        readinessProbe:
          exec:
            command: [ redis-cli, -p, "26379", ping ]
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
      - name: sidecar
        image: redis:3.2-alpine
        imagePullPolicy: Always
        command:
        - sh
        - -c
        - |
          apk update
          apk add bash wget ca-certificates bind-tools

          wget -q https://dl.k8s.io/pets/peer-finder -O /bin/peer-finder
          chmod +x /bin/peer-finder

          cat << 'EOF' > handler.sh
            #!/bin/bash
            set -x
            while read -r line; do
              name=$(echo ${line} | cut -d . -f 1)
              ip=$(dig ${line} +short)
              redis-cli -p 26379 sentinel monitor ${name} ${ip} 6379 2
              redis-cli -p 26379 sentinel set ${name} down-after-milliseconds 10000
              redis-cli -p 26379 sentinel set ${name} failover-timeout 60000
              redis-cli -p 26379 sentinel set ${name} parallel-syncs 1
            done
          EOF
          chmod +x handler.sh

          peer-finder -on-start ./handler.sh -on-change ./handler.sh -service ${SERVICE} -ns ${POD_NAMESPACE}
        env:
        - name: SERVICE
          value: redis
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
